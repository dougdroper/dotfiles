call plug#begin()

Plug 'ctrlp.vim'
Plug 'surround.vim'
Plug 'mileszs/ack.vim'
Plug 'tComment'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'janko-m/vim-test'
Plug 'tpope/vim-dispatch'
Plug 'fatih/vim-go'
Plug 'tpope/vim-fugitive'

call plug#end()

:tnoremap <Esc> <C-\><C-n>

if has('termguicolors')
  set termguicolors
endif

set background=dark
colorscheme deep-space

set nocompatible
set autoindent
set nohlsearch
set number
set ts=2 sts=2 sw=2 expandtab
set nowrap
set ignorecase
set noswapfile
set scrolloff=5               " keep at least 5 lines above/below
set sidescrolloff=5           " keep at least 5 lines left/right
set incsearch
set smartcase
set cursorline
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

set clipboard=unnamed

let test#strategy = "neovim"
nmap <silent> <leader>t :TestFile<CR>
nmap <silent> <leader>s :TestNearest<CR>

if executable("rg")
  let g:ackprg = 'rg --vimgrep --no-heading'
endif

" Show trailing whitespace and spaces before a tab:
" :highlight ExtraWhitespace ctermbg=red guibg=red
" :autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\\t/

" Rename current file
map <leader>n :call RenameFile()<cr>
" Ruby binding pry - insert binding.pry on the line above
map <leader>bp Orequire "pry"; binding.pry # DEBUG @doug
" %% For current directory thanks @squil
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" bind K to grep word under cursor
nnoremap K :Ack "<C-R><C-W>"<CR>
nmap <leader>cs :let @*=expand("%")<CR>
nmap <leader>cl :let @*=expand("%:p")<CR>

" " Copy and paste from system clipboard
" vmap <leader>y "+y
" nmap <leader>y "+yy
" nmap <leader>p "+p
" vmap <leader>p "+p
" nmap <leader>P "+P

" You know what I meant
command! Q  q  " Bind :Q  to :q
command! W  w  " Bind :W  to :w
command! Wq wq " Bind :Wq to :wq
command! WQ wq " Bind :WQ to :wq

" Open splits below and right
set splitbelow
set splitright

" Rename current file thanks @samphippen
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
